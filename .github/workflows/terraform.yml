name: Plan and deploy infrastructure

on:
  workflow_call:
    inputs:
      module-path:
        required: true
        type: string
      region:
        required: false
        type: string
        default: us-east-1
      apply-environment:
        required: false
        type: string
        default: manual-approval
      node-version:
        required: false
        type: string
        default: 16
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      ENV_VARS:
        required: false

env:
  TF_RECREATE_MISSING_LAMBDA_PACKAGE: false

jobs:
  plan:
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ${{ inputs.module-path }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure dynamic environment variables
        run: |-
          echo -e "${{ secrets.ENV_VARS }}" | while read LINE ; do
            SPLIT=(${LINE//=/ })
            VALUE=${SPLIT[1]}
            echo "::add-mask::$VALUE"
          done ;
          echo -e "${{ secrets.ENV_VARS }}" >> $GITHUB_ENV

      - name: Download Any Build Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ inputs.module-path }}/builds

      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Config Terraform Plugin Cache
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
          mkdir --parents ~/.terraform.d/plugin-cache

      - name: Cache Terraform Plugins
        uses: actions/cache@v3
        with:
          path: |
            ${{ inputs.module-path }}/.terraform.lock.hcl
            ${{ inputs.module-path }}/.terraform
            ~/.terraform.d/plugin-cache
          key: ${{ inputs.module-path }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ inputs.module-path }}-terraform-

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -input=false -backend-config=../backend.conf

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -detailed-exitcode -out tfplan.out

      - name: Cache Terraform Plan
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ inputs.module-path }}/tfplan.out
            ${{ inputs.module-path }}/builds
          key: ${{ inputs.module-path }}-terraform-plan
    outputs:
      planExitcode: ${{ steps.plan.outputs.exitcode }}

  apply:
    needs: [plan]
    if: always() && needs.plan.result == 'success' && needs.plan.outputs.planExitcode == 2
    environment: ${{ inputs.apply-environment }}
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ${{ inputs.module-path }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Cache Plugin Restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ inputs.module-path }}/.terraform.lock.hcl
            ${{ inputs.module-path }}/.terraform
            ~/.terraform.d/plugin-cache
          key: ${{ inputs.module-path }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ inputs.module-path }}-terraform-

      - name: Restore Terraform Plan
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ inputs.module-path }}/tfplan.out
            ${{ inputs.module-path }}/builds
          key: ${{ inputs.module-path }}-terraform-plan

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve "tfplan.out"

  clean:
    needs: [apply]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Clear Plan Cache
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.deleteActionsCacheByKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "${{ inputs.module-path }}-terraform-plan",
            })
        continue-on-error: true # TODO: HANDLE 404 explicitly
